# -*- coding: utf-8 -*-
"""FinalProject.ipynb

### Kelompok :
Armadhani Hiro Juni Permana (1301190234) <br>
Andre Agasi Simanungkalit (1301190338)<br>
Windy Ramadhanti (1301194002)<br>
IF-43-02

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ducuMr17ndqfUqSS0dU-riqwljAwPnBJ?usp=sharing#scrollTo=o_CDjqbgMqRq
"""

import time
import pandas as pd
import numpy as np
from bokeh.plotting import figure, show, curdoc
from bokeh.io import output_notebook, push_notebook, output_file
from bokeh.palettes import Spectral6
from bokeh.transform import linear_cmap
from bokeh.models import ColumnDataSource, HoverTool

from bokeh.tile_providers import get_provider, Vendors
from pyproj import Proj, transform

from bokeh.layouts import row, column, grid, gridplot
from bokeh.models import CustomJS
from bokeh.models.widgets import Button, Select

#output_file("tubes.html")

iSelect=0           # Index of Select (Afganisthan, dll)
nSum = [0,0,0,0,0,0,0]
nMinMax = [0,0,0,0,0,0,0]

# ------------------------------------------------------------------------------
# Database
# ------------------------------------------------------------------------------
df1=pd.read_csv('https://raw.githubusercontent.com/valiandafh/Tubes-/master/time_series_covid19_confirmed_global.csv')    # Confirmed
df2=pd.read_csv('https://raw.githubusercontent.com/valiandafh/Tubes-/master/time_series_covid19_recovered_global.csv')    # Recovered
df3=pd.read_csv('https://raw.githubusercontent.com/valiandafh/Tubes-/master/time_series_covid19_death_global.csv')        # Death


df1.rename(columns={'Province/State':'Province', 'Country/Region':'Country'}, inplace=True)
maxBaris=len(df1.iloc[:,0])     # 264
maxKolom=len(df1.iloc[0,:])     # 96

df1['Total'] = df1.iloc[:,-1]
df2['Total'] = df2.iloc[:,-1]
df3['Total'] = df3.iloc[:,-1]

dCountry=df1['Country']
dProvince=df1['Province']
lCountry=dCountry.values.tolist()
lProvince=dProvince.values.tolist()
# List of Select
L1 = lCountry
L2 = lProvince
L3 = L1

y1=df1.iloc[iSelect,4:maxKolom]
y2=df2.iloc[iSelect,4:maxKolom]
y3=df3.iloc[iSelect,4:maxKolom]
x1=[x1 for x1 in range(0,len(y1))]
mydates=y2.index.values
nBaris=len(lCountry)-1
nKolom=len(x1)-1

#print(z1)
# ------------------------------------------------------------------------------
# A = Button
# ------------------------------------------------------------------------------

mybtn15 = Button(label="Confirmed = 1176", name="12", width=120)
mybtn16 = Button(label="Recovered = 166", name="12", width=120)
mybtn17 = Button(label="Death = 140", name="12", width=120)

# ------------------------------------------------------------------------------
# B = Data
# ------------------------------------------------------------------------------
mydf=df1
mytitle="Visualisasi Statistik COVID-19"
x=mydf['Long']
y=mydf['Lat']
z=mydf['Total']
myC=mydf['Country']

#"""
mysizes=np.abs(z)
myWarna=np.abs(z)

# Konversi WGS84 to Mercator
in_wgs = Proj('epsg:4326')
out_mercator = Proj('epsg:3857')

mX = np.abs(x)
mY = np.abs(y)
for ii in range(len(x)):
  mX[ii], mY[ii] = transform(in_wgs, out_mercator, y[ii], x[ii])

  nMin=5000000
nMax=0
iMin=0
iMax=0
for ii in range(len(z)):
  if (z[ii]>nMax):
    nMax=z[ii]
    iMax=ii

for ii in range(len(z)):
  if (z[ii]<nMin):
    if (z[ii]>0):
      nMin=z[ii]
      iMin=ii


#"""
#B = Button(name="23", width=600)
# ------------------------------------------------------------------------------
# C = Select
# ------------------------------------------------------------------------------
iSlider = nKolom      # Index of Slider (0-91 days)

x1c = x1
y1c = df1.iloc[iSelect,4:maxKolom]
y2c = df2.iloc[iSelect,4:maxKolom]
y3c = df3.iloc[iSelect,4:maxKolom]

x1d=[x1 for x1 in range(0,len(y1))]
y1d=[x1 for x1 in range(0,len(y1))]
y2d=[x1 for x1 in range(0,len(y1))]
y3d=[x1 for x1 in range(0,len(y1))]

def PDailyCase(iNum):
  for i in range(1, nKolom):
    y1d[i]=y1c[i]-y1c[i-1]
    y2d[i]=y2c[i]-y2c[i-1]
    y3d[i]=y3c[i]-y3c[i-1]

PDailyCase(iSelect)
#print(x1c)
#print(y1c)
#print(y2c)
#print(x1d)
#print(y1d)
#print(y2d)

mybtn31 = Button(label=mydates[nKolom], width=70)
mybtn32 = Button(label=str(y1d[nKolom]), width=70)
mybtn33 = Button(label=str(y2d[nKolom]), width=50)
mybtn34 = Button(label=str(y3d[nKolom]), width=50)

source3 = ColumnDataSource(data=dict(x1c=x1c, y1c=y1c, y2c=y2c, y3c=y3c))
source3b = ColumnDataSource(data=dict(x1d=x1d, y1d=y1d, y2d=y2d, y3d=y3d))

plot3 = figure(plot_width=300, plot_height=200, title="Akumulasi Laporan", toolbar_location=None)
plot3.x_range.start = 0
plot3.y_range.start = 0

plot3b = figure(plot_width=300, plot_height=200, title="Laporan Kasus Harian", toolbar_location=None)
plot3b.x_range.start = 0
plot3b.y_range.start = 0


r1 = plot3.line('x1c', 'y1c', source=source3, line_width=3, line_color='red')
r2 = plot3.line('x1c', 'y2c', source=source3, line_width=3, line_color='green')
r3 = plot3.line('x1c', 'y3c', source=source3, line_width=3, line_color='blue')

r1b = plot3b.line('x1d', 'y1d', source=source3b, line_width=3, line_color='red')
r2b = plot3b.line('x1d', 'y2d', source=source3b, line_width=3, line_color='green')
r3b = plot3b.line('x1d', 'y3d', source=source3b, line_width=3, line_color='blue')


# Cek NaN variable
def isNaN(num):
  return num!= num

for i in range(nBaris):
  L3[i]=(L1[i] if isNaN(L2[i]) else (L1[i]+L2[i]))

# Event : Select
def myhandler3a(attr,old,new):
  iSelect=-1
  for i in range(0, nBaris):
    iSelect=(i if (L1[i]==new) else iSelect) 

  mybtn31.label = mydates[nKolom]
  y3c = df3.iloc[iSelect,4:maxKolom]
  y2c = df2.iloc[iSelect,4:maxKolom]
  y1c = df1.iloc[iSelect,4:maxKolom]
  mybtn15.label = "Confirmed = " + str(y1c[nKolom])
  mybtn16.label = "Recovered = " + str(y2c[nKolom])
  mybtn17.label = "Death = " + str(y3c[nKolom])
  r1.data_source.data["y1c"] = y1c
  r2.data_source.data["y2c"] = y2c
  r3.data_source.data["y3c"] = y3c
#  print(iSelect)
#  PDailyCase(iSelect)
  for i in range(1, nKolom+1):
    y1d[i]=y1c[i]-y1c[i-1]
    y2d[i]=y2c[i]-y2c[i-1]
    y3d[i]=y3c[i]-y3c[i-1]
  r1b.data_source.data["y1d"] = y1d
  r2b.data_source.data["y2d"] = y2d
  r3b.data_source.data["y3d"] = y3d
  mybtn32.label = str(y1d[nKolom])
  mybtn33.label = str(y2d[nKolom])
  mybtn34.label = str(y3d[nKolom])

opsiSelect=L3
myselect3 = Select(value=opsiSelect[0], options=opsiSelect, title="Country/Province ", width=150)
myselect3.on_change('value', myhandler3a)

print(nBaris) 
print(nKolom)
print(L1[nBaris])
print(y1c[nKolom])
print(y2c[nKolom])
print(y3c[nKolom])

# ------------------------------------------------------------------------------
# All = A + B + C 
# ------------------------------------------------------------------------------
A = column(myselect3, mybtn15, mybtn16, mybtn17)

C33 = row(mybtn31, mybtn32, mybtn33, mybtn34)
C = column(plot3, C33, plot3b)

MyLayout = row(A, C)
#show(MyLayout)
curdoc().add_root(MyLayout)
curdoc().title = "Visualisasi Statistik COVID-19"